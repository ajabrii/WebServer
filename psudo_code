main() {
    // Step 1: Parse the configuration file
    // [ConfigInterpreter] parses config.conf → builds vector<ServerConfig>
    ConfigInterpreter parser;
    parser.parse("config/webserv.conf");

    // Step 2: Retrieve all parsed server configurations
    std::vector<ServerConfig> configs = parser.getServerConfigs();

    // Step 3: Create a HttpServer instance for each config
    // [HttpServer] uses ServerConfig to setup listening socket (bind+listen)
    std::vector<HttpServer*> servers;
    for (each config in configs) {
        HttpServer* server = new HttpServer(config);
        server->setup();
        servers.push_back(server);
    }

    // Step 4: Setup Reactor (poll manager)
    // [Reactor] registers all server listening sockets
    Reactor reactor;
    for (each server in servers) {
        reactor.registerServer(*server);
    }

    // Step 5: Main event loop (reactor)
    while (true) {
        reactor.poll();  // [Reactor] waits for fd events

        std::vector<Event> events = reactor.getReadyEvents();
        for (each event in events) {
            if (event.isNewConnection) {
                // [HttpServer] accepts new client → returns Connection
                HttpServer* server = reactor.getServer(event.fd);
                Connection* conn = new Connection(server->acceptConnection());
                reactor.addConnection(conn);
            }
            else if (event.isReadable) {
                // [Connection] reads raw HTTP request string
                Connection& conn = reactor.getConnection(event.fd);
                std::string rawRequest = conn.readData();

                if (!rawRequest.empty()) {
                    // [HttpRequest] parses raw string → HttpRequest object
                    HttpRequest request = HttpRequest::parse(rawRequest);

                    // [Router] finds matching RouteConfig for URI & method
                    Router router;
                    HttpServer* server = reactor.getServer(event.fd); // find server
                    const RouteConfig* route = router.match(request, server->getConfig());

                    HttpResponse response;
                    if (route) {
                        // Step 5a: check if request should be handled by CGI
                        if (!route->cgiExtension.empty() &&
                            request.uri.ends_with(route->cgiExtension)) {

                            // [CgiExecutor / CgiHandler] → fork, exec script, capture output
                            CgiExecutor cgi;
                            response = cgi.execute(request, *route);
                        }
                        else {
                            // Step 5b: normal request → [RequestDispatcher] picks GET/POST/DELETE handler
                            RequestDispatcher dispatcher;
                            response = dispatcher.dispatch(request, *route);
                        }
                    } else {
                        // Build 404 response manually
                        response.version = "HTTP/1.1";
                        response.statusCode = 404;
                        response.statusText = "Not Found";
                        response.headers["Content-Type"] = "text/plain";
                        response.body = "404 Not Found";
                    }

                    // [HttpResponseBuilder] formats status line + headers + body
                    std::string responseStr = response.toString();

                    // [Connection] sends back response to client
                    conn.writeData(responseStr);
                }
            }
            else if (event.isWritable) {
                // Optionally clean up finished connections
                reactor.removeConnection(event.fd);
            }
        }
    }

    // Cleanup: delete servers, connections
}
